-- =====================================================
-- MIGRATION SCRIPT: Existing Users ‚Üí New Class System
-- Auto-place existing users into classes based on their current enrollment
-- =====================================================

-- =====================================================
-- PART 1: MIGRATE EXISTING CLASSES
-- =====================================================

DO $$
DECLARE
  v_old_class RECORD;
  v_new_class_id UUID;
  v_share_code TEXT;
  v_creator_id UUID;
  v_old_system_exists BOOLEAN;
  v_old_tables_exist BOOLEAN;
BEGIN
  RAISE NOTICE 'Starting migration check...';
  
  -- Check if old class system exists (class_id column in profiles)
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'profiles' 
    AND column_name = 'class_id'
  ) INTO v_old_system_exists;
  
  IF NOT v_old_system_exists THEN
    RAISE NOTICE '‚ö†Ô∏è  No old class system found (no class_id in profiles). Skipping migration.';
    RAISE NOTICE '‚ÑπÔ∏è  This is normal for fresh installations.';
    RETURN;
  END IF;
  
  RAISE NOTICE '‚úÖ Old class system detected. Starting migration...';
  
  -- Check if we have any profiles with class_id set
  IF NOT EXISTS (SELECT 1 FROM public.profiles WHERE class_id IS NOT NULL LIMIT 1) THEN
    RAISE NOTICE '‚ö†Ô∏è  No users are assigned to classes. Skipping migration.';
    RETURN;
  END IF;
  
  -- Migrate based on unique class_ids in profiles
  FOR v_old_class IN 
    SELECT DISTINCT 
      p.class_id as old_class_id,
      c.name as class_name,
      -- Find the first user who joined this class as potential creator
      (SELECT user_id FROM public.profiles WHERE class_id = p.class_id ORDER BY created_at ASC LIMIT 1) as potential_creator
    FROM public.profiles p
    LEFT JOIN public.classes c ON c.id = p.class_id
    WHERE p.class_id IS NOT NULL
  LOOP
    -- Use potential creator
    v_creator_id := v_old_class.potential_creator;
    
    IF v_creator_id IS NULL THEN
      RAISE NOTICE 'Skipping class (no creator found)';
      CONTINUE;
    END IF;
    
    -- Create new class (share_code will be auto-generated by trigger)
    INSERT INTO public.classes (name, description, creator_id, is_searchable)
    VALUES (
      COALESCE(v_old_class.class_name, 'Migrated Class'),
      'Automatically migrated from old system',
      v_creator_id,
      true
    )
    RETURNING id, share_code INTO v_new_class_id, v_share_code;
    
    RAISE NOTICE 'Created new class: % (ID: %, Share Code: %)', 
                 COALESCE(v_old_class.class_name, 'Migrated Class'), 
                 v_new_class_id, 
                 v_share_code;
    
    -- Migrate class units (if units table exists and has class_id)
    IF EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_schema = 'public' 
      AND table_name = 'units' 
      AND column_name = 'class_id'
    ) THEN
      INSERT INTO public.class_units (class_id, name, description, unit_order)
      SELECT 
        v_new_class_id,
        u.name,
        u.description,
        ROW_NUMBER() OVER (ORDER BY u.created_at) - 1
      FROM public.units u
      WHERE u.class_id = v_old_class.old_class_id;
      
      -- Update old units to reference new class_units
      UPDATE public.units u
      SET class_unit_id = cu.id
      FROM public.class_units cu
      WHERE u.class_id = v_old_class.old_class_id
        AND cu.class_id = v_new_class_id
        AND cu.name = u.name;
    END IF;
    
    -- Migrate all members (profiles with this class_id)
    INSERT INTO public.class_members (class_id, user_id, role, joined_at)
    SELECT 
      v_new_class_id,
      p.user_id,
      CASE 
        WHEN p.user_id = v_creator_id THEN 'creator'
        ELSE 'member'
      END,
      COALESCE(p.created_at, NOW())
    FROM public.profiles p
    WHERE p.class_id = v_old_class.old_class_id
    ON CONFLICT (class_id, user_id) DO NOTHING;
    
    -- Update uploads to reference new class (if possible)
    IF EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_schema = 'public' 
      AND table_name = 'uploads' 
      AND column_name = 'class_id'
    ) THEN
      UPDATE public.uploads
      SET class_id = v_new_class_id
      WHERE unit_id IN (
        SELECT id FROM public.units WHERE class_id = v_old_class.old_class_id
      );
    END IF;
    
    RAISE NOTICE 'Migrated members and content for class';
  END LOOP;
  
  RAISE NOTICE '‚úÖ Class migration completed!';
END $$;

-- =====================================================
-- PART 2: MIGRATE PROFILE INFORMATION
-- =====================================================

DO $$
DECLARE
  v_profile RECORD;
  v_country_id UUID;
  v_university_id UUID;
BEGIN
  RAISE NOTICE 'Starting migration of profile information...';
  
  -- Loop through all profiles with university information
  FOR v_profile IN 
    SELECT 
      p.id,
      p.user_id,
      p.university_id as old_university_id,
      u.name as university_name,
      c.name as country_name,
      c.id as country_id
    FROM public.profiles p
    LEFT JOIN public.universities_old u ON p.university_id = u.id
    LEFT JOIN public.countries_old c ON u.country_id = c.id
    WHERE p.university_id IS NOT NULL
  LOOP
    -- For now, we'll just log this
    -- Admin will need to add countries/universities manually
    -- Then users can update their profiles
    RAISE NOTICE 'Profile % needs to select: Country: %, University: %', 
                 v_profile.user_id, 
                 COALESCE(v_profile.country_name, 'Unknown'),
                 COALESCE(v_profile.university_name, 'Unknown');
  END LOOP;
  
  RAISE NOTICE '‚úÖ Profile information logged. Users will need to update their profiles.';
END $$;

-- =====================================================
-- PART 3: CREATE SAMPLE DATA (FOR TESTING)
-- =====================================================

-- Insert sample countries
INSERT INTO public.countries (name, code) VALUES
  ('Kenya', 'KE'),
  ('United States', 'US'),
  ('United Kingdom', 'GB'),
  ('Canada', 'CA'),
  ('Australia', 'AU'),
  ('South Africa', 'ZA'),
  ('Nigeria', 'NG'),
  ('Ghana', 'GH')
ON CONFLICT (name) DO NOTHING;

DO $$
BEGIN
  RAISE NOTICE '‚úÖ Sample countries created';
END $$;

-- Insert sample universities for Kenya
DO $$
DECLARE
  v_kenya_id UUID;
BEGIN
  SELECT id INTO v_kenya_id FROM public.countries WHERE code = 'KE';
  
  INSERT INTO public.universities (name, country_id, description) VALUES
    ('University of Nairobi', v_kenya_id, 'Premier university in Kenya'),
    ('Kenyatta University', v_kenya_id, 'Leading teacher training university'),
    ('Moi University', v_kenya_id, 'Public university in Eldoret'),
    ('Jomo Kenyatta University of Agriculture and Technology', v_kenya_id, 'JKUAT - Technology focused'),
    ('Strathmore University', v_kenya_id, 'Private university in Nairobi'),
    ('United States International University', v_kenya_id, 'USIU-Africa'),
    ('Egerton University', v_kenya_id, 'Agricultural university'),
    ('Technical University of Kenya', v_kenya_id, 'TUK - Engineering focus')
  ON CONFLICT (name, country_id) DO NOTHING;
  
  RAISE NOTICE '‚úÖ Sample Kenyan universities created';
END $$;

-- =====================================================
-- PART 4: VERIFICATION QUERIES
-- =====================================================

-- Count migrated classes
DO $$
DECLARE
  v_class_count INTEGER;
  v_member_count INTEGER;
  v_unit_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_class_count FROM public.classes;
  SELECT COUNT(*) INTO v_member_count FROM public.class_members;
  SELECT COUNT(*) INTO v_unit_count FROM public.class_units;
  
  RAISE NOTICE '==========================================';
  RAISE NOTICE 'MIGRATION SUMMARY:';
  RAISE NOTICE '==========================================';
  RAISE NOTICE 'Total Classes Created: %', v_class_count;
  RAISE NOTICE 'Total Members Enrolled: %', v_member_count;
  RAISE NOTICE 'Total Units Created: %', v_unit_count;
  RAISE NOTICE '==========================================';
  RAISE NOTICE '‚úÖ Migration completed successfully!';
  RAISE NOTICE '‚ö†Ô∏è  Users need to update their profiles with country, university, and course information';
  RAISE NOTICE '‚ö†Ô∏è  Admins need to add universities and courses via admin panel';
  RAISE NOTICE '==========================================';
END $$;

-- =====================================================
-- PART 5: CLEANUP (OPTIONAL - RUN AFTER VERIFICATION)
-- =====================================================

-- Uncomment these lines ONLY after verifying migration was successful
-- and you want to remove old class_id references

/*
-- Remove old class_id from profiles (keep the reference for now for safety)
-- ALTER TABLE public.profiles DROP COLUMN IF EXISTS class_id;

-- Archive old classes table (rename instead of drop for safety)
-- ALTER TABLE public.classes RENAME TO classes_old;
-- ALTER TABLE public.units RENAME TO units_old;
*/

-- =====================================================
-- PART 6: POST-MIGRATION INSTRUCTIONS
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '==========================================';
  RAISE NOTICE 'POST-MIGRATION STEPS:';
  RAISE NOTICE '==========================================';
  RAISE NOTICE '1. ‚úÖ Run the main schema creation script first';
  RAISE NOTICE '2. ‚úÖ Run this migration script';
  RAISE NOTICE '3. üìù Notify users to update their profiles';
  RAISE NOTICE '4. üîß Admin adds countries via admin panel';
  RAISE NOTICE '5. üîß Admin adds universities per country';
  RAISE NOTICE '6. üîß Admin bulk-pastes courses per university';
  RAISE NOTICE '7. üë• Users update their profile information';
  RAISE NOTICE '8. üéâ System is fully migrated!';
  RAISE NOTICE '==========================================';
END $$;

